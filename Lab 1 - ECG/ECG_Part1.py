# Code generated by ChatGTP, edited by Copilot, comments by Thomas

# -----SETTING THE STAGE-----
# In this part, we will setup the NI device, take some readings and print them to the terminal


#-----LINKS TO DOCUMENTATION-----
#nidaqmx.Task.ai_chanels.add_ai_voltage_chan() --> https://nidaqmx-python.readthedocs.io/en/stable/task_collections.html#nidaqmx.task.collections.AIChannelCollection.add_ai_voltage_chan
# nidaqmx.Task.timing.cfg_samp_clk_timing() --> https://nidaqmx-python.readthedocs.io/en/stable/task.html#nidaqmx.task.Timing.cfg_samp_clk_timing
# numpy.linspace() --> https://numpy.org/doc/stable/reference/generated/numpy.linspace.html#numpy-linspace 


# import all required modules/libraries
import nidaqmx                                                       # this is how we will communicate with the NI device                               
from nidaqmx.constants import AcquisitionType, TerminalConfiguration # import some constants from nidaqmx (try print(AcquisitionType) to see what it is)
import numpy as np                                                   # rename as 'np' for easier reference later

# Parameters
device = "Dev1"                           # Your NI device name
channel = "ai0"                           # Analog input channel
sample_rate = 1000                        # Samples per second (Hz)
total_time = 5                            # Total acquisition time in seconds
buffer_size = total_time * sample_rate    # How many samples to collect


# Data acquisition and processing
task=nidaqmx.Task()                                                               
task.ai_channels.add_ai_voltage_chan(f"{device}/{channel}",                       
                                        terminal_config=TerminalConfiguration.RSE) # adds an analog input assigned to {device} and {channel}
task.timing.cfg_samp_clk_timing(rate=sample_rate,                                 
                                sample_mode=AcquisitionType.FINITE,               
                                samps_per_chan=buffer_size) #for configuring when to take samples based on the hardware's internal sample clock                     

# Acquire data
data = task.read(number_of_samples_per_channel=buffer_size) # get a number of readings from the NI device equal to buffer_size                                                        
task.stop()                                                 # stops the nidaqmx task                                                                                                  
task.close()                                                # clears all modifications made to the nidaqmx task                                                                       

times = np.linspace(0,total_time, buffer_size)              # creates linearly spaced times from 0 to total_time. The third number will be the number of times generated (buffer_size)

data = np.array(data)                                       # creates a numpy array.                                                                                                  
times = np.array(times)                                     # these arrays work much fatser than regular arrays in python because numpy is partially built with a C/C++ backend       

print(data)                                                 # There is a lot of data, so it may only print some of it                                                                 
print(times)                                                # there are a lot of times, so it may only print some of it


