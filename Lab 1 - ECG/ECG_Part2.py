# Code generated by ChatGTP; edited by Copilot, and Thomas Murimboh; and comments by Thomas Murimboh
# May 01, 2024

# -----SETTING THE STAGE-----
# In this part, we will be plotting the data using the library matplotlib and saving it to a CSV file using the pandas library.


#-----LINKS TO DOCUMENTATION-----
#matplotlib https://matplotlib.org/
#pandas https://pandas.pydata.org/




# import all required modules/libraries     
import nidaqmx                                                       # this is how we will communicate with the NI device                               
from nidaqmx.constants import AcquisitionType, TerminalConfiguration # import some constants from nidaqmx (try print(AcquisitionType) to see what it is)
import numpy as np                                                   # rename as 'np' for easier reference later                                        
import matplotlib.pyplot as plt                                      # for plotting data (a very widely used library)                                   
import pandas as pd                                                  # for saving data to CSV easily


# Parameters
device = "Dev1"                        # Your NI device name              
channel = "ai0"                        # Analog input channel             
sample_rate = 1000                     # Samples per second (Hz)          
total_time = 5                         # Total acquisition time in seconds
buffer_size = total_time * sample_rate # How many samples to collect


# Data acquisition and processing
task=nidaqmx.Task()
task.ai_channels.add_ai_voltage_chan(f"{device}/{channel}",
                                    terminal_config=TerminalConfiguration.RSE) # adds an analog input assigned to {device} and {channel}
task.timing.cfg_samp_clk_timing(rate=sample_rate,
                                sample_mode=AcquisitionType.FINITE,
                                samps_per_chan=buffer_size) # for configuring when to take samples based on the hardware's internal sample clock
# Acquire data
data = task.read(number_of_samples_per_channel=buffer_size) # get a number of readings from the NI device equal to buffer_size
task.stop()                                                 # stops the nidaqmx task
task.close()                                                # clears all modifications made to the nidaqmx task

times = np.linspace(0,total_time, buffer_size)                          # creates a number of evenly spaced times from 0 to total_time equal to buffer_size
data = np.array(data)                                                   # creates a numpy array                                                                                            
times = np.array(times)                                                 # these arrays work much fatser than regular arrays in python because numpy is partially built with a C/C++ backend
df=pd.DataFrame(data, index=times, columns=['voltage'])                 # create a dataframe (like a python spreadsheet). The index is the time axis, and the data is the voltage values.
df.to_csv(r'F:\python\ECG Stuff\ECG_data.csv', index=True, header=True) # Save the data to a CSV file (the r at the beginning indicates that this is a file path)                          

#   Plot the graph
plt.figure(figsize=(10, 5))                                     # create a figure and set the figure size to 10" by 5"                                                                           
plt.plot(times, data, linewidth=2, label="ECG Signal")          # plot signal data with a label                                                                                                  
plt.xlabel('Time (seconds)')                                    # label the x axis                                                                                                               
plt.ylabel('Voltage (V)')                                       # label the y axis                                                                                                               
plt.title('ECG Signal')                                         # title the graph                                                                                                                
plt.legend(loc=4)                                               # 1 is top left, 2 is bottom left, 3 is top right, 4 is bottom left. You can also spell out locations (eg. "center left"). https: // matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.legend.html
plt.grid(True)                                                  # show a grid background                                                                                                         
plt.show()                                                      # show the final plot

